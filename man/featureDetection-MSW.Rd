% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/DataClasses.R, R/functions-Params.R, R/methods-OnDiskMSnExp.R, R/methods-Params.R
\docType{class}
\name{featureDetection-MSW}
\alias{MSW}
\alias{MSWParam}
\alias{MSWParam-class}
\alias{addParams}
\alias{addParams,MSWParam-method}
\alias{addParams<-}
\alias{addParams<-,MSWParam-method}
\alias{ampTh}
\alias{ampTh,MSWParam-method}
\alias{ampTh<-}
\alias{ampTh<-,MSWParam-method}
\alias{detectFeatures,MSnExp,MSWParam-method}
\alias{detectFeatures,OnDiskMSnExp,MSWParam-method}
\alias{featureDetection-MSW}
\alias{minNoiseLevel}
\alias{minNoiseLevel,MSWParam-method}
\alias{minNoiseLevel<-}
\alias{minNoiseLevel<-,MSWParam-method}
\alias{nearbyPeak}
\alias{nearbyPeak,MSWParam-method}
\alias{nearbyPeak<-}
\alias{nearbyPeak<-,MSWParam-method}
\alias{peakScaleRange}
\alias{peakScaleRange,MSWParam-method}
\alias{peakScaleRange<-}
\alias{peakScaleRange<-,MSWParam-method}
\alias{peakThr}
\alias{peakThr,MSWParam-method}
\alias{peakThr<-}
\alias{peakThr<-,MSWParam-method}
\alias{ridgeLength}
\alias{ridgeLength,MSWParam-method}
\alias{ridgeLength<-}
\alias{ridgeLength<-,MSWParam-method}
\alias{scales}
\alias{scales,MSWParam-method}
\alias{scales<-}
\alias{scales<-,MSWParam-method}
\alias{show,MSWParam-method}
\alias{snthresh,MSWParam-method}
\alias{snthresh<-,MSWParam-method}
\alias{tuneIn}
\alias{tuneIn,MSWParam-method}
\alias{tuneIn<-}
\alias{tuneIn<-,MSWParam-method}
\alias{verboseColumns,MSWParam-method}
\alias{verboseColumns<-,MSWParam-method}
\title{Single-spectrum non-chromatography MS data feature detection}
\usage{
MSWParam(snthresh = 3, verboseColumns = FALSE, scales = c(1, seq(2, 30,
  2), seq(32, 64, 4)), nearbyPeak = TRUE, peakScaleRange = 5,
  ampTh = 0.01, minNoiseLevel = ampTh/snthresh, ridgeLength = 24,
  peakThr = NULL, tuneIn = FALSE, ...)

\S4method{detectFeatures}{OnDiskMSnExp,MSWParam}(object, param,
  BPPARAM = bpparam(), return.type = "list")

\S4method{detectFeatures}{MSnExp,MSWParam}(object, param, BPPARAM = bpparam(),
  return.type = "list")

\S4method{show}{MSWParam}(object)

\S4method{snthresh}{MSWParam}(object)

\S4method{snthresh}{MSWParam}(object) <- value

\S4method{verboseColumns}{MSWParam}(object)

\S4method{verboseColumns}{MSWParam}(object) <- value

\S4method{scales}{MSWParam}(object)

\S4method{scales}{MSWParam}(object) <- value

\S4method{nearbyPeak}{MSWParam}(object)

\S4method{nearbyPeak}{MSWParam}(object) <- value

\S4method{peakScaleRange}{MSWParam}(object)

\S4method{peakScaleRange}{MSWParam}(object) <- value

\S4method{ampTh}{MSWParam}(object)

\S4method{ampTh}{MSWParam}(object) <- value

\S4method{minNoiseLevel}{MSWParam}(object)

\S4method{minNoiseLevel}{MSWParam}(object) <- value

\S4method{ridgeLength}{MSWParam}(object)

\S4method{ridgeLength}{MSWParam}(object) <- value

\S4method{peakThr}{MSWParam}(object)

\S4method{peakThr}{MSWParam}(object) <- value

\S4method{tuneIn}{MSWParam}(object)

\S4method{tuneIn}{MSWParam}(object) <- value

\S4method{addParams}{MSWParam}(object)

\S4method{addParams}{MSWParam}(object) <- value
}
\arguments{
\item{snthresh}{numeric(1) defining the signal to noise ratio cutoff.}

\item{verboseColumns}{Logical whether additional feature meta data columns
should be returned.}

\item{scales}{Numeric defining the scales of the continuous wavelet
transform (CWT).}

\item{nearbyPeak}{logical(1) whether to include nearby peaks of
major peaks.}

\item{peakScaleRange}{numeric(1) defining the scale range of the
peak (larger than 5 by default).}

\item{ampTh}{numeric(1) defining the minimum required relative
amplitude of the peak (ratio of the maximum of CWT coefficients).}

\item{minNoiseLevel}{numeric(1) defining the minimum noise level
used in computing the SNR.}

\item{ridgeLength}{numeric(1) defining the minimum highest scale
of the peak in 2-D CWT coefficient matrix.}

\item{peakThr}{numeric(1) with the minimum absolute intensity
(above baseline) of peaks to be picked. If provided, the smoothing function
\code{\link[MassSpecWavelet]{sav.gol}} function is called to estimate the
local intensity.}

\item{tuneIn}{logical(1) whther to tune in the parameter
estimation of the detected peaks.}

\item{...}{Additional parameters to be passed to the
\code{\link[MassSpecWavelet]{identifyMajorPeaks}} and
\code{\link[MassSpecWavelet]{sav.gol}} functions from the
\code{MassSpecWavelet} package.}

\item{object}{For \code{detectFeatures}: Either an
\code{\link[MSnbase]{OnDiskMSnExp}} or a \code{\link[MSnbase]{MSnExp}}
object containing the MS- and all other experiment-relevant data.

For all other methods: a parameter object.}

\item{param}{An \code{MSWParam} object containing all settings for
the algorithm.}

\item{BPPARAM}{A parameter class specifying if and how parallel processing
should be performed. It defaults to \code{\link[BiocParallel]{bpparam}}.
See documentation of the \code{BiocParallel} for more details. If parallel
processing is enables, feature detection is performed in parallel on several
of the input samples.}

\item{return.type}{Character specifying what type of object the method should
return. Can be either \code{"list"} or \code{"xcmsSet"}.}

\item{value}{The value for the slot.}
}
\value{
The \code{MSWParam} function returns a \code{MSWParam}
class instance with all of the settings specified for feature detection by
the centWave method.

For \code{detectFeatures}: if \code{return.type = "list"} a list of
length equal to the number of samples with matrices specifying the
identified features/peaks. If \code{return.type = "xcmsSet"} an
\code{\linkS4class{xcmsSet}} object with the results of the feature
detection.
}
\description{
Perform feature detection in mass spectrometry
direct injection spectrum using a wavelet based algorithm.

The \code{MSWParam} class allows to specify all
settings for a feature detection using the MSW method. Instances should be
created with the \code{MSWParam} constructor.

The \code{detectFeatures,OnDiskMSnExp,MSWParam}
method performs feature detection in single-spectrum non-chromatography MS
data using functionality from the \code{MassSpecWavelet} package on all
samples from an \code{\link[MSnbase]{OnDiskMSnExp}} object.
\code{\link[MSnbase]{OnDiskMSnExp}} objects encapsule all experiment specific
data and load the spectra data (mz and intensity values) on the fly from the
original files applying also all eventual data manipulations.

The \code{detectFeatures,MSnExp,MSWParam} method
performs feature detection in single-spectrum non-chromatography MS
data using functionality from the \code{MassSpecWavelet} package on all
samples from an \code{\link[MSnbase]{MSnExp}} object. These objects contain
mz and intensity values of all spectra hence no additional
data input from the original files is required.

\code{snthresh},\code{snthresh<-}: getter and setter for the
\code{snthresh} slot of the object.

\code{verboseColumns},\code{verboseColumns<-}: getter and setter
for the \code{verboseColumns} slot of the object.

\code{scales},\code{scales<-}: getter and setter for the
\code{scales} slot of the object.

\code{nearbyPeak},\code{nearbyPeak<-}: getter and setter for the
\code{nearbyPeak} slot of the object.

\code{peakScaleRange},\code{peakScaleRange<-}: getter and setter
for the \code{peakScaleRange} slot of the object.

\code{ampTh},\code{ampTh<-}: getter and setter for the
\code{ampTh} slot of the object.

\code{minNoiseLevel},\code{minNoiseLevel<-}: getter and setter
for the \code{minNoiseLevel} slot of the object.

\code{ridgeLength},\code{ridgeLength<-}: getter and setter for
the \code{ridgeLength} slot of the object.

\code{peakThr},\code{peakThr<-}: getter and setter for the
\code{peakThr} slot of the object.

\code{tuneIn},\code{tuneIn<-}: getter and setter for the
\code{tuneIn} slot of the object.

\code{addParams},\code{addParams<-}: getter and setter for the
\code{addParams} slot of the object. This slot stores optional additional
parameters to be passed to the
\code{\link[MassSpecWavelet]{identifyMajorPeaks}} and
\code{\link[MassSpecWavelet]{sav.gol}} functions from the
\code{MassSpecWavelet} package.
}
\details{
This is a wrapper for the peak picker in Bioconductor's
\code{MassSpecWavelet} package calling
\code{\link[MassSpecWavelet]{peakDetectionCWT}} and
\code{\link[MassSpecWavelet]{tuneInPeakInfo}} functions. See the
\emph{xcmsDirect} vignette for more information.

Parallel processing (one process per sample) is supported and can
be configured either by the \code{BPPARAM} parameter or by globally defining
the parallel processing mode using the \code{\link[BiocParallel]{register}}
method from the \code{BiocParallel} package.
}
\section{Slots}{

\describe{
\item{\code{.__classVersion__,snthresh,verboseColumns,scales,nearbyPeak,peakScaleRange,ampTh,minNoiseLevel,ridgeLength,peakThr,tuneIn,addParams}}{See corresponding parameter above. \code{.__classVersion__} stores the version from the class. Slots values
should exclusively be accessed \emph{via} the corresponding getter and
setter methods listed above.}
}}
\note{
These methods and classes are part of the updated and modernized
\code{xcms} user interface which will eventually replace the
\code{\link{findPeaks}} methods. It supports feature detection on
\code{\link[MSnbase]{MSnExp}} and \code{\link[MSnbase]{OnDiskMSnExp}}
objects (both defined in the \code{MSnbase} package). All of the settings
to the massifquant and centWave algorithm can be passed with a
\code{MassifquantParam} object.
}
\examples{

## Create a MassifquantParam object
mp <- MSWParam()
## Change snthresh parameter
snthresh(mp) <- 15
mp

}
\author{
Joachim Kutzera, Steffen Neumann, Johannes Rainer
}
\seealso{
The \code{\link{do_detectFeatures_MSW}} core API function
and \code{\link{findPeaks.MSW}} for the old user interface.

Other feature detection methods: \code{\link{detectFeatures}},
  \code{\link{featureDetection-centWave}},
  \code{\link{featureDetection-massifquant}},
  \code{\link{featureDetection-matchedFilter}}
}

