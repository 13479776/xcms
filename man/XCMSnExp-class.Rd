% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/DataClasses.R, R/methods-MsFeatureData.R, R/methods-OnDiskMSnExp.R, R/methods-XCMSnExp.R
\docType{class}
\name{MsFeatureData-class}
\alias{MsFeatureData}
\alias{MsFeatureData-class}
\alias{XCMSnExp}
\alias{XCMSnExp-class}
\alias{adjustedRtime}
\alias{adjustedRtime,MsFeatureData-method}
\alias{adjustedRtime,XCMSnExp-method}
\alias{adjustedRtime<-}
\alias{adjustedRtime<-,MsFeatureData-method}
\alias{adjustedRtime<-,XCMSnExp-method}
\alias{dropAdjustedRtime}
\alias{dropAdjustedRtime,MsFeatureData-method}
\alias{dropAdjustedRtime,XCMSnExp-method}
\alias{dropFeatureGroups}
\alias{dropFeatureGroups,MsFeatureData-method}
\alias{dropFeatureGroups,XCMSnExp-method}
\alias{dropFeatures}
\alias{dropFeatures,MsFeatureData-method}
\alias{dropFeatures,XCMSnExp-method}
\alias{featureGroups}
\alias{featureGroups,MsFeatureData-method}
\alias{featureGroups,XCMSnExp-method}
\alias{featureGroups<-}
\alias{featureGroups<-,MsFeatureData-method}
\alias{featureGroups<-,XCMSnExp-method}
\alias{features}
\alias{features,MsFeatureData-method}
\alias{features,XCMSnExp-method}
\alias{features<-}
\alias{features<-,MsFeatureData-method}
\alias{features<-,XCMSnExp-method}
\alias{hasAdjustedRtime}
\alias{hasAdjustedRtime,MsFeatureData-method}
\alias{hasAdjustedRtime,XCMSnExp-method}
\alias{hasAlignedFeatures}
\alias{hasAlignedFeatures,MsFeatureData-method}
\alias{hasAlignedFeatures,XCMSnExp-method}
\alias{hasDetectedFeatures}
\alias{hasDetectedFeatures,MsFeatureData-method}
\alias{hasDetectedFeatures,XCMSnExp-method}
\alias{intensity,XCMSnExp-method}
\alias{mz,XCMSnExp-method}
\alias{processHistory}
\alias{processHistory,XCMSnExp-method}
\alias{profMat,OnDiskMSnExp-method}
\alias{profMat,XCMSnExp-method}
\alias{rtime,XCMSnExp-method}
\alias{setAs}
\alias{show,MsFeatureData-method}
\alias{show,XCMSnExp-method}
\alias{spectra,XCMSnExp-method}
\title{Data container storing xcms preprocessing results}
\usage{
\S4method{show}{MsFeatureData}(object)

\S4method{hasAdjustedRtime}{MsFeatureData}(object)

\S4method{hasAlignedFeatures}{MsFeatureData}(object)

\S4method{hasDetectedFeatures}{MsFeatureData}(object)

\S4method{adjustedRtime}{MsFeatureData}(object)

\S4method{adjustedRtime}{MsFeatureData}(object) <- value

\S4method{dropAdjustedRtime}{MsFeatureData}(object)

\S4method{featureGroups}{MsFeatureData}(object)

\S4method{featureGroups}{MsFeatureData}(object) <- value

\S4method{dropFeatureGroups}{MsFeatureData}(object)

\S4method{features}{MsFeatureData}(object)

\S4method{features}{MsFeatureData}(object) <- value

\S4method{dropFeatures}{MsFeatureData}(object)

\S4method{profMat}{OnDiskMSnExp}(object, method = "bin", step = 0.1,
  baselevel = NULL, basespace = NULL, mzrange. = NULL, fileIndex, ...)

\S4method{show}{XCMSnExp}(object)

\S4method{hasAdjustedRtime}{XCMSnExp}(object)

\S4method{hasAlignedFeatures}{XCMSnExp}(object)

\S4method{hasDetectedFeatures}{XCMSnExp}(object)

\S4method{adjustedRtime}{XCMSnExp}(object, bySample = FALSE)

\S4method{adjustedRtime}{XCMSnExp}(object) <- value

\S4method{featureGroups}{XCMSnExp}(object)

\S4method{featureGroups}{XCMSnExp}(object) <- value

\S4method{features}{XCMSnExp}(object, bySample = FALSE)

\S4method{features}{XCMSnExp}(object) <- value

\S4method{rtime}{XCMSnExp}(object, bySample = FALSE)

\S4method{mz}{XCMSnExp}(object, bySample = FALSE)

\S4method{intensity}{XCMSnExp}(object, bySample = FALSE)

\S4method{spectra}{XCMSnExp}(object, bySample = FALSE)

\S4method{processHistory}{XCMSnExp}(object, fileIndex, type)

\S4method{dropFeatures}{XCMSnExp}(object)

\S4method{dropFeatureGroups}{XCMSnExp}(object, keepAdjRtime = FALSE,
  dropLastN = -1)

\S4method{dropAdjustedRtime}{XCMSnExp}(object)

\S4method{profMat}{XCMSnExp}(object, method = "bin", step = 0.1,
  baselevel = NULL, basespace = NULL, mzrange. = NULL, fileIndex, ...)
}
\arguments{
\item{object}{For \code{adjustedRtime}, \code{featureGroups},
\code{features}, \code{hasAdjustedRtime}, \code{hasAlignedFeatures} and
\code{hasDetectedFeatures} either a \code{MsFeatureData} or a \code{XCMSnExp}
object, for all other methods a \code{XCMSnExp} object.}

\item{value}{For \code{adjustedRtime<-}: a \code{list} (length equal to the
number of samples) with numeric vectors representing the adjusted retention
times per scan.

For \code{featureGroups<-}: a \code{DataFrame} with feature
alignment information. See return value for the \code{featureGroups} method
for the expected format.

For \code{features<-}: a \code{matrix} with information on
detected features. See return value for the \code{features} method for the
expected format.}

\item{method}{The profile matrix generation method. Allowed are \code{"bin"},
\code{"binlin"}, \code{"binlinbase"} and \code{"intlin"}. See details
section for more information.}

\item{step}{numeric(1) representing the m/z bin size.}

\item{baselevel}{numeric(1) representing the base value to which
empty elements (i.e. m/z bins without a measured intensity) should be set.
Only considered if \code{method = "binlinbase"}. See \code{baseValue}
parameter of \code{\link{imputeLinInterpol}} for more details.}

\item{basespace}{numeric(1) representing the m/z length after
which the signal will drop to the base level. Linear interpolation will be
used between consecutive data points falling within \code{2 * basespace} to
each other. Only considered if \code{method = "binlinbase"}. If not
specified, it defaults to \code{0.075}. Internally this parameter is
translated into the \code{distance} parameter of the
\code{\link{imputeLinInterpol}} function by
\code{distance = floor(basespace / step)}. See \code{distance} parameter
of \code{\link{imputeLinInterpol}} for more details.}

\item{mzrange.}{Optional numeric(2) manually specifying the mz value range to
be used for binnind. If not provided, the whole mz value range is used.}

\item{fileIndex}{For \code{processHistory}: optional \code{numeric}
specifying the index of the files/samples for which the
\code{\link{ProcessHistory}} objects should be retrieved.}

\item{...}{Additional parameters.}

\item{bySample}{logical(1) specifying whether results should be grouped by
sample.}

\item{type}{For \code{processHistory}: restrict returned
\code{\link{ProcessHistory}} objects to analysis steps of a certain type.
Supported values are \code{"Unknown"}, \code{"Feature detection"},
\code{"Feature alignment"} and \code{"Retention time correction"}.}

\item{keepAdjRtime}{For \code{dropFeatureGroups,XCMSnExp}: logical(1)
defining whether eventually present retention time adjustment should not be
dropped. By default dropping feature groups drops retention time adjustment
results too.}

\item{dropLastN}{For \code{dropFeatureGroups,XCMSnExp}: numeric(1) defining
the number of feature alignment related process history steps to remove. By
default \code{dropLastN = -1}, dropping the features removes all process
history steps related to feature alignment. Setting e.g. \code{dropLastN = 1}
will only remove the most recent feature alignment related process history
step.}
}
\value{
For \code{profMat}: a \code{list} with a the profile matrix
\code{matrix} (or matrices if \code{fileIndex} was not specified or if
\code{length(fileIndex) > 1}). See \code{\link{profile-matrix}} for general
help and information about the profile matrix.

For \code{adjustedRtime}: if \code{bySample = FALSE} a \code{numeric}
vector with the adjusted retention for each spectrum of all files/samples
within the object. If \code{bySample = TRUE } a \code{list} (length equal to
the number of samples) with adjusted retention times grouped by sample.
Returns \code{NULL} if no adjusted retention times are present.

For \code{featureGroups}: a \code{DataFrame} with feature alignment
information, each row corresponding to one group of aligned features (across
samples) and columns \code{"mzmed"} (median mz value), \code{"mzmin"}
(minimal mz value), \code{"mzmax"} (maximum mz value), \code{"rtmed"} (median
retention time), \code{"rtmin"} (minimal retention time), \code{"rtmax"}
(maximal retention time) and \code{"featureidx"}. Column \code{"featureidx"}
contains a \code{list} with indices of features (rows) in the matrix returned
by the \code{features} method that belong to that feature group. The method
returns \code{NULL} if no aligned feature information is present.

For \code{features}: if \code{bySample = FALSE} a \code{matrix} with
at least the following columns: \code{"mz"} (mz value for the largest
intensity), \code{"mzmin"} (minimal mz value), \code{"mzmax"} (maximal mz
value), \code{"rt"} (retention time for the peak apex), \code{"rtmin"}
(minimal retention time), \code{"rtmax"} (maximal retention time),
\code{"into"} (integrated, original, intensity of the feature) and
\code{"sample"} (sample index in which the feature was identified).
Depending on the employed feature detection algorithm and the
\code{verboseColumns} parameter of it additional columns might be returned.
For \code{bySample = TRUE} the features are returned as a \code{list} of
matrices, each containing the features of a specific sample. For sample in
which no feastures were detected a matrix with 0 rows is returned.

For \code{rtime}: if \code{bySample = FALSE} a numeric vector with the
retention times of each scan, if \code{bySample = TRUE} a \code{list} of
numeric vectors with the retention times per sample.

For \code{mz}: if \code{bySample = FALSE} a \code{list} with the mz
values (numeric vectors) of each scan. If \code{bySample = TRUE} a
\code{list} with the mz values per sample.

For \code{intensity}: if \code{bySample = FALSE} a \code{list} with
the intensity values (numeric vectors) of each scan. If
\code{bySample = TRUE} a \code{list} with the intensity values per sample.

For \code{spectra}: if \code{bySample = FALSE} a \code{list} with
\code{\link[MSnbase]{Spectrum}} objects. If \code{bySample = TRUE} the result
is grouped by sample, i.e. as a \code{list} of \code{lists}, each element in
the \emph{outer} \code{list} being the \code{list} of spectra of the specific
file.

For \code{processHistory}: a \code{list} of
\code{\link{ProcessHistory}} objects providing the details of the individual
data processing steps that have been performed.
}
\description{
The \code{MsFeatureData} class is designed to encapsule all
data related to the preprocessing of metabolomics data using the \code{xcms}
package, i.e. it contains a \code{matrix} with the features identified by the
feature detection, a \code{DataFrame} with the information on aligned
features across samples and a \code{list} with the adjusted retention times
per sample.

The \code{XCMSnExp} object is designed to contain all results
from metabolomics data preprocessing (feature detection, feature alignment
and retention time correction). The corresponding elements in the
\code{msFeatureData} slot are \code{"features"} (a \code{matrix}),
\code{"featureGroups"} (a \code{DataFrame}) and \code{"adjustedRtime"} (a
\code{list} of numeric vectors). Note that these should not be accessed
directly but rather \emph{via} their accessor methods. Along with the results,
the object contains the processing history that allow to track each
processing step along with the used settings. The object also directly
extends the \code{\link[MSnbase]{OnDiskMSnExp}} object hence allowing easy
access to the full data on which the feature detection was performed.

Objects from this class should not be created directly, they are returned as
result from the \code{\link{detectFeatures}} method.

\code{XCMSnExp} objects can be coerced into \code{\linkS4class{xcmsSet}}
objects using the \code{as} method.

\code{profMat}: creates a \emph{profile matrix}, which
is a n x m matrix, n (rows) representing equally spaced m/z values (bins) and
m (columns) the retention time of the corresponding scans. Each cell contains
the maximum intensity measured for the specific scan and m/z values. See
\code{\link{profMat}} for more details and description of the various binning
methods.

\code{hasAdjustedRtime}: whether the object provides adjusted
retention times.

\code{hasAlignedFeatures}: whether the object contains feature
alignment results.

\code{hasDetectedFeatures}: whether the object contains feature
detection results.

\code{adjustedRtime},\code{adjustedRtime<-}:
extract/set adjusted retention times. \code{adjustedRtime<-} should not be
called manually, it is called internally by the \code{\link{adjustRtime}}
methods. For \code{XCMSnExp} objects, \code{adjustedRtime<-} does also apply
the retention time adjustment to the features in the object.
The \code{bySample} parameter allows to specify whether the adjusted
retention time should be grouped by sample (file).

\code{featureGroups}, \code{featureGroups<-}: extract
or set the feature alignment results.

\code{features}, \code{features<-}: extract or set
the matrix containing the information on identified features. Parameter
\code{bySample} allows to specify whether features should be returned
ungrouped (default \code{bySample = FALSE}) or grouped by sample (
\code{bySample = TRUE}). The \code{features<-} method for \code{XCMSnExp}
objects removes also all feature alignment and retention time correction
results.
See description of the return value for details on the returned matrix. Users
usually don't have to use the \code{features<-} method directly as detected
features are added to the object by the \code{\link{detectFeatures}} method.

\code{rtime}: extracts the retention time for each
scan. The \code{bySample} parameter allows to return the values grouped
by sample/file.

\code{mz}: extracts the mz values from each scan of
all files within an \code{XCMSnExp} object. These values are extracted from
the original data files and eventual processing steps are applied
\emph{on the fly}. Using the \code{bySample} parameter it is possible to
switch from the default grouping of mz values by spectrum/scan to a grouping
by sample/file.

\code{intensity}: extracts the intensity values from
each scan of all files within an \code{XCMSnExp} object. These values are
extracted from the original data files and eventual processing steps are
applied \emph{on the fly}. Using the \code{bySample} parameter it is possible
to switch from the default grouping of intensity values by spectrum/scan to
a grouping by sample/file.

\code{spectra}: extracts the
\code{\link[MSnbase]{Spectrum}} objects containing all data from
\code{object}. These values are extracted from the original data files and
eventual processing steps are applied \emph{on the fly}. Setting
\code{bySample = TRUE} the spectra are returned grouped by sample/file.

\code{processHistory}: returns a \code{list} with
\code{\link{ProcessHistory}} objects (or objects inheriting from this base
class) representing the individual processing steps that have been performed,
eventually along with their settings (\code{Param} parameter class). Optional
arguments \code{fileIndex} and \code{type} allow to restrict to process steps
of a certain type or performed on a certain file.

\code{dropFeatures}: drops any identified features
and returns the object without that information. Note that for
\code{XCMSnExp} objects the method drops all results from a feature alignment
or retention time adjustment too. For \code{XCMSnExp} objects the method
drops also any related process history steps.

\code{dropFeatureGroups}: drops aligned feature
results (i.e. feature groups) and returns the object
without that information. Note that for \code{XCMSnExp} objects the method
will also drop retention time adjustment results, if these were performed
after the last feature alignment (i.e. which base on the results from the
feature alignment that are going to be removed). For \code{XCMSnExp} objects
also all related process history steps are removed.

\code{dropAdjustedRtime}: drops any retention time
adjustment information and returns the object without adjusted retention
time. For \code{XCMSnExp} object this also reverts the retention times
reported for the features in the feature matrix to the original, raw, ones
(after feature detection). Note that for \code{XCMSnExp} objects the method
drops also all feature alignment results if these were performed \emph{after}
the retention time adjustment. For \code{XCMSnExp} objects the method drops
also any related process history steps.
}
\section{Slots}{

\describe{
\item{\code{.processHistory}}{\code{list} with \code{XProcessHistory} objects
tracking all individual analysis steps that have been performed.}

\item{\code{msFeatureData}}{\code{MsFeatureData} class extending \code{environment}
and containing the results from a feature detection (element
\code{"features"}), feature alignment (element \code{"featureGroups"}) and
retention time correction (element \code{""}) steps.}
}}
\note{
The \code{"features"} element in the \code{msFeatureData} slot is
equivalent to the \code{@peaks} slot of the \code{xcmsSet} object, the
\code{"featureGroups"} contains information from the \code{}
}
\examples{

## Loading the data from 2 files of the faahKO package.
library(faahKO)
od <- readMSData2(c(system.file("cdf/KO/ko15.CDF", package = "faahKO"),
                    system.file("cdf/KO/ko16.CDF", package = "faahKO")))
## Now we perform a feature detection on this data set using the
## matched filter method. We are tuning the settings such that it performs
## faster.
mfp <- MatchedFilterParam(binSize = 4)
xod <- detectFeatures(od, param = mfp)

## The results from the feature detection are now stored in the XCMSnExp
## object
xod

## The detected features can be accessed with the features method.
head(features(xod))

## The settings of the feature detection can be accessed with the
## processHistory method
processHistory(xod)

## Also the parameter class for the feature detection can be accessed
processParam(processHistory(xod)[[1]])

## The XCMSnExp inherits all methods from the pSet and OnDiskMSnExp classes
## defined in Bioconductor's MSnbase package. To access the (raw) retention
## time for each spectrum we can use the rtime method. Setting bySample = TRUE
## would cause the retention times to be grouped by sample
head(rtime(xod))

## Similarly it is possible to extract the mz values or the intensity values
## using the mz and intensity method, respectively, also with the option to
## return the results grouped by sample instead of the default, which is
## grouped by spectrum. Finally, to extract all of the data we can use the
## spectra method which returns Spectrum objects containing all raw data.
## Note that all these methods read the information from the original input
## files and subsequently apply eventual data processing steps to them.
head(mz(xod, bySample = TRUE))

## Reading all data
spctr <- spectra(xod)
## To get all spectra of the first file we can split them by file
head(split(spctr, fromFile(xod))[[1]])

############
## Filtering
##
## XCMSnExp objects can be filtered by file, retention time, mz values or
## MS level. For some of these filter preprocessing results (mostly
## retention time correction and feature alignment results) will be dropped.
## Below we filter the XCMSnExp object by file to extract the results for
## only the second file.
xod_2 <- filterFile(xod, file = 2)
xod_2

## Now the objects contains only the idenfified features for the second file
head(features(xod_2))

head(features(xod)[features(xod)[, "sample"] == 2, ])

##########
## Coercing to an xcmsSet object
##
## We can also coerce the XCMSnExp object into an xcmsSet object:
xs <- as(xod, "xcmsSet")
head(peaks(xs))
}
\author{
Johannes Rainer
}
\seealso{
\code{\linkS4class{xcmsSet}} for the old implementation.

\code{\link[MSnbase]{OnDiskMSnExp}}, \code{\link[MSnbase]{MSnExp}}
and \code{\link[MSnbase]{pSet}} for a complete list of inherited methods.

\code{\link{detectFeatures}} for available feature detection methods
returning a \code{XCMSnExp} object as a result.

\code{\link{groupFeatures}} for available feature grouping methods
and \code{\link{groupval,XCMSnExp-method}} for the method to extract feature
grouping results.

\code{\link{adjustRtime}} for retention time adjustment methods.
}

